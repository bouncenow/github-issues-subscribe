buildscript {
	ext {
		kotlinVersion = '1.2.70'
		springBootVersion = '2.1.0.RELEASE'
		jooqPluginVersion = '3.0.2'
		flywayPluginVersion = '5.2.1'
		apolloPluginVersion = '1.0.0-alpha3'
		apolloRuntimeVersion = '1.0.0-alpha3'
	}
	repositories {
		mavenCentral()
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath("nu.studer:gradle-jooq-plugin:${jooqPluginVersion}")
		classpath("gradle.plugin.com.boxfuse.client:gradle-plugin-publishing:${flywayPluginVersion}")
		classpath("com.apollographql.apollo:apollo-gradle-plugin:${apolloPluginVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'nu.studer.jooq'
apply plugin: 'com.apollographql.android'

group = 'com.github.bouncenow'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

repositories {
	mavenCentral()
	jcenter()
}


dependencies {
	implementation('org.springframework.boot:spring-boot-starter-jooq')
	implementation('org.springframework.boot:spring-boot-starter-mail')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
	implementation('org.flywaydb:flyway-core')
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation("com.apollographql.apollo:apollo-runtime:${apolloRuntimeVersion}")
	implementation("com.apollographql.apollo:apollo-rx-support:${apolloRuntimeVersion}")
	compile('org.postgresql:postgresql')
	jooqRuntime("org.postgresql:postgresql")
	testImplementation('org.springframework.boot:spring-boot-starter-test')
}

task setDatabaseProperties {
	try {
		URI dbUri = new URI(System.getenv("DATABASE_URL"))
		String username = dbUri.getUserInfo().split(":")[0]
		String password = dbUri.getUserInfo().split(":")[1]
		int port = dbUri.getPort()

		String dbUrl = "jdbc:postgresql://" + dbUri.getHost() + ":" + port + dbUri.getPath()

		databaseJdbcUrl = dbUrl
		databaseUser = username
		databasePassword = password
	} catch (NullPointerException ex) {
		println("DATABASE_URL not set, using default values")
	}
}

jooq {
	edition = 'OSS'
	version = '3.11.5'// the default (can be omitted), other allowed values are PRO, PRO_JAVA_6, and TRIAL
	app(sourceSets.main) {
		jdbc {
			driver = 'org.postgresql.Driver'
			url = project.ext.databaseJdbcUrl
			user = project.ext.databaseUser
			password = project.ext.databasePassword
		}
		generator {
			name = 'org.jooq.codegen.DefaultGenerator'
			strategy {
				name = 'org.jooq.codegen.DefaultGeneratorStrategy'
				// ...
			}
			database {
				name = 'org.jooq.meta.postgres.PostgresDatabase'
				schemata {
					schema {
						inputSchema = 'public'
					}
					schema {
						inputSchema = 'app'
					}
				}
			}
			generate {
				relations = true
				deprecated = false
				records = true
				immutablePojos = true
				fluentSetters = true
				javaTimeTypes = true
				// ...
			}
			target {
				packageName = 'com.github.bouncenow.db'
				// directory = ...
			}
		}
	}
}

flyway {
	url = project.ext.databaseJdbcUrl
	user = project.ext.databaseUser
	password = project.ext.databasePassword
	schemas = ['app']
	locations = ["filesystem:$project.projectDir/src/main/resources/db/migration"]
}

generateAppJooqSchemaSource.dependsOn flywayMigrate
compileKotlin.dependsOn generateAppJooqSchemaSource

flywayMigrate.dependsOn setDatabaseProperties

apollo {
	customTypeMapping = [
	        "DateTime" : "java.time.LocalDateTime"
	]
}